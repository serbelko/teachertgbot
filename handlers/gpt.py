import os
import time

import requests
from dotenv import load_dotenv

def get_get_gpt_info(subject, class_int, description, theme, hard, time_lesson, tests, homework):
    load_dotenv()
    folder_id = os.getenv("YANDEX_FOLDER_ID")
    api_key = os.getenv("YANDEX_API_KEY")
    gpt_model = 'yandexgpt-lite'

    system_prompt = """
        Создай подробный план урока с учётом следующих параметров:

Общие параметры:
- Предмет: (пользователь укажет название предмета)
- Класс: (укажи класс или уровень обучения)
- Тема урока: (пользователь укажет  основную тему занятия)
- Личные пожелания: (личные пожелания учителя - ОНИ СТОЯТ ВЫШЕ ВСЕГО ОПИСАННОГО ТЕКСТА)
- Сложность: (базовый или продвинутый)
- Время: (укажи продолжительность урока в минутах) - ОБЯЗАТЕЛЬНО УЧИТЫВАТЬ
- Тестирование: (пользователь укажет , требуются ли тесты; True/False)
- Домашнее задание: (пользователь укажет , нужно ли задавать домашнее задание; True/False)

Базовая структура урока, если учитель не предложил свою:

    1. Введение:
    - Постановка целей урока и краткий обзор темы.
    - Мотивация учащихся: почему тема важна и как она будет применяться.

    2. Основная часть:
    - Детальное изложение нового материала с примерами.
    - Демонстрация, визуальные материалы или мультимедийные средства.
    - Интерактивные методы обучения: обсуждения, вопросы, работа в парах или группах.
    - Промежуточные проверки понимания (опросы, мини-упражнения).

    3. Практическая работа:
    - Индивидуальные или групповые задания для закрепления материала.
    - Практические примеры, кейс-стади или упражнения.
    - Инструкции по выполнению и временные рамки.

    4. Заключение:
    - Обобщение ключевых моментов урока.
    - Ответы на вопросы и обсуждение сложных моментов.
    - Обратная связь от учеников (рефлексия).
    - Информация о домашнем задании (если требуется) и критерии оценки.

    5. Дополнительные разделы (по необходимости):
    - Использование интерактивных технологий и мультимедиа.
    - Инструкции для проведения тестирования и критерии оценки знаний.
    - Рекомендации для самостоятельного изучения темы.
    - Литература

    Убедись, что план урока структурирован логически, включает временные рамки для каждого этапа и акцентирует внимание на активном вовлечении учеников в процесс обучения.
    Также убедись, что урок должен быть интересным - добавь геймофикацию, и что-то ещё, что может сделать урок интересный в промт - предложи нестандарнтный вариант урока
    Также убери Маркапы - ОЧЕНЬ ВАЖНО
    """
    user_prompt = f"""Пожелания пользователя
    Предмет: {subject}, класс: {class_int}, Тема: {theme}, Личные пожелания:{description} Сложность: {hard}, 
    Время урока: {time_lesson}, Тестирование: {tests}, Дз: {homework}"""

    body = {
        'modelUri': f'gpt://{folder_id}/{gpt_model}',
        'completionOptions': {'stream': False, 'temperature': 0.3, 'maxTokens': 2000},
        'messages': [
            {'role': 'system', 'text': system_prompt},
            {'role': 'user', 'text': user_prompt},
        ],
    }
    url = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completionAsync'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Api-Key {api_key}'
    }

    response = requests.post(url, headers=headers, json=body)
    operation_id = response.json().get('id')

    url = f"https://llm.api.cloud.yandex.net:443/operations/{operation_id}"
    headers = {"Authorization": f"Api-Key {api_key}"}

    while True:
        response = requests.get(url, headers=headers)
        done = response.json()["done"]
        if done:
            break
        time.sleep(2)

    data = response.json()
    answer = data['response']['alternatives'][0]['message']['text']

    return answer
